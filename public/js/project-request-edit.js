// X·ª≠ l√Ω hi·ªÉn th·ªã section theo lo·∫°i item ƒë∆∞·ª£c ch·ªçn
document.querySelectorAll('input[name="item_type"]').forEach(radio => {
    radio.addEventListener('change', function() {
        // ·∫®n t·∫•t c·∫£ c√°c section
        document.querySelectorAll('.item-section').forEach(section => {
            section.classList.add('hidden');
            
            // T·∫Øt required cho c√°c tr∆∞·ªùng trong section ·∫©n
            section.querySelectorAll('[required]').forEach(field => {
                field.removeAttribute('required');
            });
        });
        
        // Hi·ªÉn th·ªã section t∆∞∆°ng ·ª©ng
        const selectedType = this.value;
        const selectedSection = document.getElementById(selectedType + '_section');
        selectedSection.classList.remove('hidden');
        
        // B·∫≠t required cho c√°c tr∆∞·ªùng trong section hi·ªÉn th·ªã
        selectedSection.querySelectorAll('.required-field').forEach(field => {
            field.setAttribute('required', 'required');
        });
    });
});

// X·ª≠ l√Ω hi·ªÉn th·ªã th√¥ng tin ph∆∞∆°ng th·ª©c x·ª≠ l√Ω
document.querySelectorAll('input[name="approval_method"]').forEach(radio => {
    radio.addEventListener('change', function() {
        // ·∫®n t·∫•t c·∫£ c√°c th√¥ng tin
        const productionInfo = document.getElementById('production_info');
        const warehouseInfo = document.getElementById('warehouse_info');
        
        if (productionInfo) productionInfo.classList.add('hidden');
        if (warehouseInfo) warehouseInfo.classList.add('hidden');
        
        // Hi·ªÉn th·ªã th√¥ng tin t∆∞∆°ng ·ª©ng
        if (this.value === 'production') {
            if (productionInfo) productionInfo.classList.remove('hidden');
            // Ch·ªâ hi·ªÉn th·ªã radio "Th√†nh ph·∫©m" khi ch·ªçn "S·∫£n xu·∫•t l·∫Øp r√°p"
            const equipmentRadio = document.getElementById('equipment_radio');
            const materialRadio = document.getElementById('material_radio');
            const goodRadio = document.getElementById('good_radio');
            
            if (equipmentRadio) equipmentRadio.style.display = 'flex';
            if (materialRadio) materialRadio.style.display = 'none';
            if (goodRadio) goodRadio.style.display = 'none';
            
            // T·ª± ƒë·ªông ch·ªçn "Th√†nh ph·∫©m"
            const equipmentType = document.getElementById('equipment_type');
            if (equipmentType) {
                equipmentType.checked = true;
                // K√≠ch ho·∫°t s·ª± ki·ªán change ƒë·ªÉ hi·ªÉn th·ªã section th√†nh ph·∫©m
                equipmentType.dispatchEvent(new Event('change'));
            }
        } else if (this.value === 'warehouse') {
            if (warehouseInfo) warehouseInfo.classList.remove('hidden');
            // Hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß 3 radio khi ch·ªçn "Xu·∫•t kho"
            const equipmentRadio = document.getElementById('equipment_radio');
            const materialRadio = document.getElementById('material_radio');
            const goodRadio = document.getElementById('good_radio');
            
            if (equipmentRadio) equipmentRadio.style.display = 'flex';
            if (materialRadio) materialRadio.style.display = 'flex';
            if (goodRadio) goodRadio.style.display = 'flex';
        }
    });
});

// Ki·ªÉm tra t·ªìn kho khi ch·ªçn item
function checkStock(itemType, itemId, selectElement) {
    if (!itemId) return;
    
    fetch(`/api/check-stock/${itemType}/${itemId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                if (data.has_stock) {
                    // Hi·ªÉn th·ªã th√¥ng tin t·ªìn kho
                    const stockInfo = data.warehouses.map(w => 
                        `${w.warehouse_name}: ${w.quantity}`
                    ).join(', ');
                    
                    // T·∫°o th√¥ng b√°o th√†nh c√¥ng
                    const successMsg = `‚úÖ ƒê√£ ch·ªçn th√†nh c√¥ng: ${data.item_name} (${data.item_code})\nüì¶ T·ªïng t·ªìn kho: ${data.total_stock}\nüè¢ Kho: ${stockInfo}`;
                    
                    // Hi·ªÉn th·ªã th√¥ng b√°o
                    showNotification(successMsg, 'success');
                    
                    // Th√™m class th√†nh c√¥ng cho select
                    selectElement.classList.add('border-green-500');
                    selectElement.classList.remove('border-red-500');
                } else {
                    // Th√¥ng b√°o kh√¥ng ƒë·ªß t·ªìn kho
                    const errorMsg = `‚ùå Kh√¥ng ƒë·ªß t·ªìn kho cho: ${data.item_name} (${data.item_code})\nüì¶ T·ªïng t·ªìn kho: ${data.total_stock}`;
                    
                    showNotification(errorMsg, 'error');
                    
                    // Reset select v√† th√™m class l·ªói
                    selectElement.value = '';
                    selectElement.classList.add('border-red-500');
                    selectElement.classList.remove('border-green-500');
                }
            } else {
                showNotification('‚ùå L·ªói khi ki·ªÉm tra t·ªìn kho', 'error');
            }
        })
        .catch(error => {
            console.error('Error checking stock:', error);
            showNotification('‚ùå L·ªói khi ki·ªÉm tra t·ªìn kho', 'error');
        });
}

// Hi·ªÉn th·ªã th√¥ng b√°o
function showNotification(message, type) {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
        type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
    }`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // T·ª± ƒë·ªông ·∫©n sau 5 gi√¢y
    setTimeout(() => {
        notification.remove();
    }, 5000);
}

// L·∫•y item type t·ª´ select
function getItemTypeFromSelect(selectElement) {
    const name = selectElement.name;
    if (name.includes('equipment')) return 'product';
    if (name.includes('material')) return 'material';
    if (name.includes('good')) return 'good';
    return 'product';
}

// X·ª≠ l√Ω th√™m/x√≥a rows cho equipment
let equipmentIndex = 1;

document.addEventListener('DOMContentLoaded', function() {
    const addEquipmentBtn = document.getElementById('add_equipment');
    if (addEquipmentBtn) {
        addEquipmentBtn.addEventListener('click', function() {
            const container = document.getElementById('equipment_container');
            if (!container) return;
            
            const newRow = document.createElement('div');
            newRow.className = 'equipment-row grid grid-cols-1 md:grid-cols-5 gap-4 mb-3';
            newRow.innerHTML = `
                <div class="md:col-span-3">
                    <label for="equipment_id_${equipmentIndex}" class="block text-sm font-medium text-gray-700 mb-1 required">Thi·∫øt b·ªã</label>
                    <select name="equipment[${equipmentIndex}][id]" id="equipment_id_${equipmentIndex}" required class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 required-field equipment-select">
                        <option value="">-- Ch·ªçn thi·∫øt b·ªã --</option>
                    </select>
                </div>
                <div class="md:col-span-1">
                    <label for="equipment_quantity_${equipmentIndex}" class="block text-sm font-medium text-gray-700 mb-1 required">S·ªë l∆∞·ª£ng</label>
                    <input type="number" name="equipment[${equipmentIndex}][quantity]" id="equipment_quantity_${equipmentIndex}" required min="1" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 required-field equipment-quantity" value="1">
                </div>
                <div class="md:col-span-1 flex items-end">
                    <button type="button" class="remove-row h-10 w-10 flex items-center justify-center rounded-full bg-red-100 hover:bg-red-500 transition-colors group">
                        <i class="fas fa-trash text-red-500 group-hover:text-white"></i>
                    </button>
                </div>
            `;
            container.appendChild(newRow);
            equipmentIndex++;
            
            // Hi·ªÉn th·ªã n√∫t x√≥a cho t·∫•t c·∫£ rows
            updateRemoveButtons();
        });
    }
    
    // X·ª≠ l√Ω th√™m/x√≥a rows cho material
    let materialIndex = 1;
    const addMaterialBtn = document.getElementById('add_material');
    if (addMaterialBtn) {
        addMaterialBtn.addEventListener('click', function() {
            const container = document.getElementById('material_container');
            if (!container) return;
            
            const newRow = document.createElement('div');
            newRow.className = 'material-row grid grid-cols-1 md:grid-cols-5 gap-4 mb-3';
            newRow.innerHTML = `
                <div class="md:col-span-3">
                    <label for="material_id_${materialIndex}" class="block text-sm font-medium text-gray-700 mb-1 required">V·∫≠t t∆∞</label>
                    <select name="material[${materialIndex}][id]" id="material_id_${materialIndex}" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 required-field">
                        <option value="">-- Ch·ªçn v·∫≠t t∆∞ --</option>
                    </select>
                </div>
                <div class="md:col-span-1">
                    <label for="material_quantity_${materialIndex}" class="block text-sm font-medium text-gray-700 mb-1 required">S·ªë l∆∞·ª£ng</label>
                    <input type="number" name="material[${materialIndex}][quantity]" id="material_quantity_${materialIndex}" min="1" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 required-field" value="1">
                </div>
                <div class="md:col-span-1 flex items-end">
                    <button type="button" class="remove-row h-10 w-10 flex items-center justify-center rounded-full bg-red-100 hover:bg-red-500 transition-colors group">
                        <i class="fas fa-trash text-red-500 group-hover:text-white"></i>
                    </button>
                </div>
            `;
            container.appendChild(newRow);
            materialIndex++;
            
            // Hi·ªÉn th·ªã n√∫t x√≥a cho t·∫•t c·∫£ rows
            updateRemoveButtons();
        });
    }
    
    // X·ª≠ l√Ω th√™m/x√≥a rows cho good
    let goodIndex = 1;
    const addGoodBtn = document.getElementById('add_good');
    if (addGoodBtn) {
        addGoodBtn.addEventListener('click', function() {
            const container = document.getElementById('good_container');
            if (!container) return;
            
            const newRow = document.createElement('div');
            newRow.className = 'good-row grid grid-cols-1 md:grid-cols-5 gap-4 mb-3';
            newRow.innerHTML = `
                <div class="md:col-span-3">
                    <label for="good_id_${goodIndex}" class="block text-sm font-medium text-gray-700 mb-1 required">H√†ng h√≥a</label>
                    <select name="good[${goodIndex}][id]" id="good_id_${goodIndex}" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 required-field">
                        <option value="">-- Ch·ªçn h√†ng h√≥a --</option>
                    </select>
                </div>
                <div class="md:col-span-1">
                    <label for="good_quantity_${goodIndex}" class="block text-sm font-medium text-gray-700 mb-1 required">S·ªë l∆∞·ª£ng</label>
                    <input type="number" name="good[${goodIndex}][quantity]" id="good_quantity_${goodIndex}" min="1" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 required-field" value="1">
                </div>
                <div class="md:col-span-1 flex items-end">
                    <button type="button" class="remove-row h-10 w-10 flex items-center justify-center rounded-full bg-red-100 hover:bg-red-500 transition-colors group">
                        <i class="fas fa-trash text-red-500 group-hover:text-white"></i>
                    </button>
                </div>
            `;
            container.appendChild(newRow);
            goodIndex++;
            
            // Hi·ªÉn th·ªã n√∫t x√≥a cho t·∫•t c·∫£ rows
            updateRemoveButtons();
        });
    }
    
    // X·ª≠ l√Ω x√≥a row
    document.addEventListener('click', function(e) {
        if (e.target.closest('.remove-row')) {
            const row = e.target.closest('.equipment-row, .material-row, .good-row');
            if (row) {
                row.remove();
                updateRemoveButtons();
            }
        }
    });
    
    // Th√™m event listener cho c√°c select items ƒë·ªÉ ki·ªÉm tra t·ªìn kho
    document.addEventListener('change', function(e) {
        if (e.target.matches('select[name*="[id]"]')) {
            const itemType = getItemTypeFromSelect(e.target);
            const itemId = e.target.value;
            
            if (itemId) {
                checkStock(itemType, itemId, e.target);
            }
        }
    });
    
    // H√†m c·∫≠p nh·∫≠t hi·ªÉn th·ªã n√∫t x√≥a
    function updateRemoveButtons() {
        const sections = ['equipment', 'material', 'good'];
        sections.forEach(section => {
            const container = document.getElementById(section + '_container');
            if (!container) return;
            
            const rows = container.querySelectorAll('.' + section + '-row');
            
            rows.forEach((row, index) => {
                const removeBtn = row.querySelector('.remove-row');
                if (rows.length === 1) {
                    removeBtn.classList.add('invisible');
                } else {
                    removeBtn.classList.remove('invisible');
                }
            });
        });
    }
    
    // Kh·ªüi t·∫°o khi trang load
    updateRemoveButtons();
    
    // K√≠ch ho·∫°t s·ª± ki·ªán change cho approval_method ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng radio buttons
    const approvalMethod = document.querySelector('input[name="approval_method"]:checked');
    if (approvalMethod) {
        approvalMethod.dispatchEvent(new Event('change'));
    }
    
    // K√≠ch ho·∫°t s·ª± ki·ªán change cho item_type ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng section
    const itemType = document.querySelector('input[name="item_type"]:checked');
    if (itemType) {
        itemType.dispatchEvent(new Event('change'));
    }
}); 